Alexandre Clavel
David Yang
Nathan Dupont

End of Lab Checkpoint: https://github.com/alexandreclalex/CompProg/tree/lab2end/lab2

Hailstone Sequences
    Document what the problem is asking for in your own words
        Hailstone sequences is a simple problem where given an integer, depending on if it is even or odd, perform a certain calculation. 
        The hailstone sequence is an iterative sequence, where if the current value is even, the next number is half of the current number. 
        If the current value is odd, the next number is defined by (3a + 1), where a is the current value. 
        After a few calculations, it will eventually become 1. When it reaches one, you are done and return how many calculations were done.

    Describe the algorithm and data structure you used to solve (or attempt to solve) the problem
        We used a while loops to continue looping until we reach a base case of n = 1. Inside the while loop, we used an if-else statement to check if n is even or odd. 
        We then perform the according operation on the current value to determine the next value of the sequence, and continue the loop.

        We were able to just store the current value of the sequence instead of the whole sequence, helping us not need a data structure to store multiple elements.

    Save the output from your last submission to Kattis (e.g. a screenshot of the web interface) for your last submission during the lab competition
        ID	    DATE	            PROBLEM	            STATUS	     CPU	  LANG
        8638783	2022-03-16 17:24:49	Hailstone Sequences	✅Accepted	0.10 s	Java
    
    What is the runtime complexity and memory complexity of your solution?
        Our runtime complexity is dependent on the length of the sequence. This problem follows the Collatz Conjecture, meaning that every input value of the problem generates a unique sequence of numbers, with it's own "stopping time", or length of the sequence. 
        Since it hasn't been proven that the sequence converges at 1 for all real numbers, the worst-case runtime complexity of the problem is currently hypothetically O(infinity). 
        However, to make the runtime complexity better defined, it can be re-defined in terms of the length, or "stopping time" of the sequence. 

        Defining the runtime complexity in terms of the length of the generated sequence (a) produces a runtime complexity of O(3a + 4), or O(a).

        Our memory complexity is O(3), as we need to allocate space for the scanner, the current number in the sequence, and the current position in the sequence. This evaluates to a memory complexity of O(1).

    What optimizations (if any) did you implement?
        Instead of storing the entire sequence, we only saved the current value of the sequence. This allowed us to calculate the next value and overwrite the current value, keeping our memory complexity low.

        Since we needed to calculate the entire hailstone sequence, and all numbers are unique to the sequence (otherwise it would loop), we could not optimize the sequence calculations.

    How did other programming languages (if used) affect your submission results?
        We completed this problem in Java, as it only consisted of basic input logic and only required some simple math to generate the sequence. 
        After the competition, we tried completing it in Python and didn't see much of an improvement. 
        A few milliseconds were reduced off the runtime (0.06s in Python, compared to 0.10s), however, the logic was exactly the same. 
        This increase may be due to the delay introduced by the Scanner, or other language features in Java.

Hermits
    Document what the problem is asking for in your own words
        Given populations of streets, and intersections of streets, find the street with the least population on itself and all adjoining streets

    Describe the algorithm and data structure you used to solve (or attempt to solve) the problem
        Populations were stored in an array
        Street intersections were stored in a 2d array

        We iterate through the indices, and add the populations of the other streets at crossings
        We then find the minimum adjoining population and print out the corresponding street

    Save the output from your last submission to Kattis (e.g. a screenshot of the web interface) for your last submission during the lab competition
        8638778	2022-03-16 17:24:17	Hermits	✅Accepted	0.35 s	Python 3

    What is the runtime complexity and memory complexity of your solution?
        n = number of street intersections. The algorithm may be bound by the number of streets m, 
        but since n can be <= m(m-1)/2, in the worst case, the algorithm is bounded by the number of intersections.
        
        Runtime: O(n)
            We need to iterate through all of the intersections to calculate the solution
        Memory: O(n)
            We need to read in all intersections, and store them in an array of dimenstions m * 2

    What optimizations (if any) did you implement?
        Optimizes data in by using sys.stdin.readline rather than builtin input. We would probably TLE if using input.

Odd A’s, Even B’s
    Document what the problem is asking for in your own words
        Given length n, how many strings of {a, b} can be made where a's are always in odd groups and b's are always in even groups

    Describe the algorithm and data structure you used to solve (or attempt to solve) the problem
        I used a recursive algorithm with a cache to speed up computation.
        If n = 0: we have reached the end of the string, and return 1
        If the result was already computed, return what we calculated before

        I implemented rules based on the last char, using the odd/even properties of 'a' and 'b' respectively:
            'a':
                Add 2 'a', and calculate n - 2
                Add 2 'b', and calculate n - 2
            'b':
                Add 1 'a', and calculate n - 1
                Add 2 'b', and calculate n - 2
            Start of String:
                Add 1 'a', and calculate n - 1
                Add 2 'b', and calculate n - 2
        
        I then cache the result in the cache, and return the result

    Save the output from your last submission to Kattis (e.g. a screenshot of the web interface) for your last submission during the lab competition
        8638915	2022-03-16 17:47:35	Odd A's, Even B's	✅Accepted	0.06 s	Python 3

    What is the runtime complexity and memory complexity of your solution?
        n = given length
        Runtime: O(n)
            Since we cache the result, and the time to calculate one cache entry is constant, we have the smae complexity for runtime as memory.
        Memory: O(n)
            With caching, we have at most n * 2 cache entries, one for each length and each last char.

    What optimizations (if any) did you implement?
        Adding a cache to the problem greatly improved the runtime, as the solution went from exponential recursion to linear recursion

    How did other programming languages (if used) affect your submission results?
        Python inbuit dict was useful as a quick and easy way to build a cache

Varied Amusements
    Document what the problem is asking for in your own words
        Given n rides to ride and A, B, and C number of each rides, what is the number of possible ways to ride n rides without repeating ride types

    Describe the algorithm and data structure you used to solve (or attempt to solve) the problem
        I used a recursive solution with a cache to store previously calculated results
        First, check if we have a cache hit, if so, return the cached result.
        Next, check if we have reached the total number of rides, if so, return 1

        Next, conditional on the last ride we rode:
            If we just rode a, we can now ride b or c
            If we just rode b, we can now ride a or c
            If we just rode c, we can now ride a or b
            If we have not ridden a ride yet, we can ride all rides.

        Then, cache and return the result
        
    Save the output from your last submission to Kattis (e.g. a screenshot of the web interface) for your last submission during the lab competition
        During lab:
        8639094	2022-03-16 18:21:18	Varied Amusements	✅Accepted (1)	> 1.00 s	Python 3
        After lab:
        8639459	2022-03-16 19:44:05	Varied Amusements	✅Accepted (2)	0.06 s	Python 3

    What is the runtime complexity and memory complexity of your solution?
        n = given length
        Runtime: O(n)
            Since we cache the result, and the time to calculate one cache entry is constant, we have the smae complexity for runtime as memory.
        Memory: O(n)
            With caching, we have at most n * 3 cache entries, one for each length and each last ridden ride

    What optimizations (if any) did you implement?
        Caching the result greatly improved runtime, at the cost of memory

    How did other programming languages (if used) affect your submission results?
        Python dict was useful to make easy cache